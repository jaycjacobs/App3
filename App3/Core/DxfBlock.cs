using System.Collections.Generic;
using Windows.Foundation;

namespace Cirros.Dxf
{
    public class DxfBlock
    {
        DxfReader _reader;

        public DxfBlock(DxfReader reader)
        {
            _reader = reader;
        }

         //  0  Entity type (BLOCK)
         //  5  Handle
         //102  (optional) Start of application-defined group "{application_name". 
         //           For example, "{ACAD_REACTORS" indicates the start of the AutoCAD persistent reactors group. 
         //102  (optional) End of group, "}"
         //330  Soft-pointer ID/handle to owner object
         //100  Subclass marker (AcDbEntity)
         //  8  Layer name
         //100  Subclass marker (AcDbBlockBegin)
         //  2  Block name
         // 70  Block-type flags (bit coded values, may be combined): 
         //       1 = This is an anonymous block generated by hatching, associative dimensioning, other internal operations, or an application.
         //       2 = This block has non-constant attribute definitions (this bit is not set if the block has any attribute definitions that are 
         //               constant, or has no attribute definitions at all).
         //       4 = This block is an external reference (xref).
         //       8 = This block is an xref overlay. 
         //       16 = This block is externally dependent.
         //       32 = This is a resolved external reference, or dependent of an external reference (ignored on input).
         //       64 = This definition is a referenced external reference (ignored on input).
         // 10  Base point DXF: X value; APP: 3D point
         // 20, 30  DXF: Y and Z values of base point
         //  3  Block name
         //  1  Xref path name 
         //  4  Block description (optional)

        public string Layer;        // 8
        public string Name;         // 2
        public string Handle;       // 5
        public string SoftPointer;  // 330
        public string SubClass;     // 100
        public int Flags;           // 70
        public float X;             // 10
        public float Y;             // 20
        public float Z;             // 30
        public string Name3;        // 3 why are there 2 block names?
        public string Path;         // 1
        public string Description;  // 4

        public Rect Bounds = Rect.Empty;
        public Drawing.Unit Units = Drawing.Unit.Undefined;

        public List<DxfEntity> Entities = new List<DxfEntity>();

        public void SetGroup(DxfGroup group)
        {
            if (group.Code == 8)
            {
                Layer = group.Value;
            }
            else if (group.Code == 2)
            {
                Name = group.Value;
            }
            else if (group.Code == 3)
            {
                Name3 = group.Value;
            }
            else if (group.Code == 5)
            {
                Handle = group.Value;
            }
            else if (group.Code == 102)
            {
                _reader.PushGroup(group);
                List<DxfGroup> list = _reader.Read102Group();
            }
            else if (group.Code == 330)
            {
                SoftPointer = group.Value;
            }
            else if (group.Code == 100)
            {
                SubClass = group.Value;
            }
            else if (group.Code == 1)
            {
                Path = group.Value;
            }
            else if (group.Code == 4)
            {
                Description = group.Value;
            }
            else if (group.Code == 70)
            {
                Flags = int.Parse(group.Value);
            }
            else if (group.Code == 10)
            {
                X = float.Parse(group.Value);
            }
            else if (group.Code == 20)
            {
                Y = float.Parse(group.Value);
            }
            else if (group.Code == 30)
            {
                Z = float.Parse(group.Value);
            }
            else if (group.Code == 48)
            {
                // found in sample files but not in documentation 
            }
            else if (group.Code == 67)
            {
                // found in sample files but not in documentation 
            }
            else
            {
#if DEBUG
                string msg = string.Format("DXF parse: Unexpected group in BLOCK definition: code={0}, value={1}", group.Code, group.Value);
                System.Diagnostics.Debug.WriteLine(msg);
#endif
            }
        }
    }
}
