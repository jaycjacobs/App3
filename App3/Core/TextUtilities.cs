using Windows.Foundation;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Media;

namespace Cirros.TextUtilities
{
    public class FontInfo
    {
        private static uint[] _timesRomanWidths = {
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            250,333,408,500,500,833,778,333,
            333,333,500,564,250,564,250,278,
            500,500,500,500,500,500,500,500,
            500,500,278,278,564,564,564,444,
            921,722,667,667,722,611,556,722,
            722,333,389,722,611,889,722,722,
            556,722,667,556,611,722,722,944,
            722,722,611,333,278,333,469,500,
            333,444,500,444,500,444,333,500,
            500,278,278,500,278,778,500,500,
            500,500,333,389,278,500,500,722,
            500,500,444,480,200,480,541,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,333,333,333,333,333,333,333,
            333,0,333,333,0,333,333,333,
            250,333,500,500,500,500,200,500,
            333,760,276,500,564,333,760,333,
            400,564,300,300,333,500,453,250,
            333,300,310,500,750,750,750,444,
            722,722,722,722,722,722,889,667,
            611,611,611,611,333,333,333,333,
            722,722,722,722,722,722,722,564,
            722,722,722,722,722,722,556,500,
            444,444,444,444,444,444,667,444,
            444,444,444,444,278,278,278,278,
            500,500,500,500,500,500,500,564,
            500,500,500,500,500,500,500,500,
        };

        private static uint[] _timesBoldWidths = {
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            250,333,555,500,500,100,833,333,
            333,333,500,570,250,570,250,278,
            500,500,500,500,500,500,500,500,
            500,500,333,333,570,570,570,500,
            930,722,667,722,722,667,611,778,
            778,389,500,778,667,944,722,778,
            611,778,722,556,667,722,722,1000,
            722,722,667,333,278,333,581,500,
            333,500,556,444,556,444,333,500,
            556,278,333,556,278,833,556,500,
            556,556,444,389,333,556,500,722,
            500,500,444,394,220,394,520,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,333,333,333,333,333,333,333,
            333,0,333,333,0,333,333,333,
            250,333,500,500,500,500,220,500,
            333,747,300,500,570,333,747,333,
            400,570,300,300,333,556,540,250,
            333,300,330,500,750,750,750,500,
            722,722,722,722,722,722,100,722,
            667,667,667,667,389,389,389,389,
            722,722,778,778,778,778,778,570,
            778,722,722,722,722,722,611,556,
            500,500,500,500,500,500,722,444,
            444,444,444,444,278,278,278,278,
            500,556,500,500,500,500,500,570,
            500,556,556,556,556,500,556,500,
        };

        private static uint[] _timesItalicWidths = {
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            250,333,420,500,500,833,778,333,
            333,333,500,675,250,675,250,278,
            500,500,500,500,500,500,500,500,
            500,500,333,333,675,675,675,500,
            920,611,611,667,722,611,611,722,
            722,333,444,667,556,833,667,722,
            611,722,611,500,556,722,611,833,
            611,556,556,389,278,389,422,500,
            333,500,500,444,500,444,278,500,
            500,278,278,444,278,722,500,500,
            500,500,389,389,278,500,444,667,
            444,444,389,400,275,400,541,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,333,333,333,333,333,333,333,
            333,0,333,333,0,333,333,333,
            250,389,500,500,500,500,275,500,
            333,760,276,500,675,333,760,333,
            400,675,300,300,333,500,523,250,
            333,300,310,500,750,750,750,500,
            611,611,611,611,611,611,889,667,
            611,611,611,611,333,333,333,333,
            722,667,722,722,722,722,722,675,
            722,722,722,722,722,556,611,500,
            500,500,500,500,500,500,667,444,
            444,444,444,444,278,278,278,278,
            500,500,500,500,500,500,500,675,
            500,500,500,500,500,444,500,444,
        };

        private static uint[] _timesBoldItalicWidths = {
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            250,389,555,500,500,833,778,333,
            333,333,500,570,250,606,250,278,
            500,500,500,500,500,500,500,500,
            500,500,333,333,570,570,570,500,
            832,667,667,667,722,667,667,722,
            778,389,500,667,611,889,722,722,
            611,722,667,556,611,722,667,889,
            667,611,611,333,278,333,570,500,
            333,500,500,444,500,444,333,500,
            556,278,278,500,278,778,556,500,
            500,500,389,389,278,556,444,667,
            500,444,389,348,220,348,57,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,333,333,333,333,333,333,333,
            333,0,333,333,0,333,333,333,
            250,389,500,500,500,500,220,500,
            333,747,266,500,606,333,747,333,
            400,570,300,300,333,576,500,250,
            333,300,300,500,750,750,750,500,
            667,667,667,667,667,667,944,667,
            667,667,667,667,389,389,389,389,
            722,722,722,722,722,722,722,570,
            722,722,722,722,722,611,611,500,
            500,500,500,500,500,500,722,444,
            444,444,444,444,278,278,278,278,
            500,556,500,500,500,500,500,570,
            500,556,556,556,556,444,500,444,
        };

        private static uint[] _helveticaWidths = {
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,278,355,556,556,889,667,222,
            333,333,389,584,278,584,278,278,
            556,556,556,556,556,556,556,556,
            556,556,278,278,584,584,584,556,
            1010,667,667,722,722,667,611,778,
            722,278,500,667,556,833,722,778,
            667,778,722,667,611,722,667,944,
            667,667,611,278,278,278,469,556,
            222,556,556,500,556,556,278,556,
            556,222,222,500,222,833,556,556,
            556,556,333,500,278,556,500,722,
            500,500,500,334,260,334,584,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,333,333,333,333,333,333,333,
            333,0,333,333,0,333,333,333,
            278,333,556,556,556,556,260,556,
            333,737,370,556,584,333,737,333,
            400,584,333,333,333,556,537,278,
            333,333,365,556,834,834,834,611,
            667,667,667,667,667,667,1000,722,
            667,667,667,667,278,278,278,278,
            722,722,778,778,778,778,778,584,
            778,722,722,722,722,667,667,611,
            556,556,556,556,556,556,889,500,
            556,556,556,556,278,278,278,278,
            556,556,556,556,556,556,556,584,
            611,556,556,556,556,500,556,500,
        };

        private static uint[] _helveticaBoldWidths = {
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,333,474,556,556,889,722,278,
            333,333,389,584,278,584,278,278,
            556,556,556,556,556,556,556,556,
            556,556,333,333,584,584,584,611,
            975,722,722,722,722,667,611,778,
            722,278,556,722,611,833,722,778,
            667,778,722,667,611,722,667,944,
            667,667,611,333,278,333,584,556,
            278,556,611,556,611,556,333,611,
            611,278,278,556,278,889,611,611,
            611,611,389,556,333,611,556,778,
            556,556,5,389,28,389,584,0,
            0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,
            278,333,333,333,333,333,333,333,
            333,0,333,333,0,333,333,333,
            278,333,556,556,556,556,28,556,
            333,737,37,556,584,333,737,333,
            4,584,333,333,333,611,556,278,
            333,333,365,556,834,834,834,611,
            722,722,722,722,722,722,1,722,
            667,667,667,667,278,278,278,278,
            722,722,778,778,778,778,778,584,
            778,722,722,722,722,667,667,611,
            556,556,556,556,556,556,889,556,
            556,556,556,556,278,278,278,278,
            611,611,611,611,611,611,611,584,
            611,611,611,611,611,556,611,556,
        };

        public static void FontHeight(string font, double size, out double capHeight, out double descent)
        {
#if true
            Cirros.Core.Dx.GetFontHeight(font, size, out capHeight, out descent);
#else
            double h = 0;
            {
                Size test = new Size(10000, 10000);

                TextBlock tb = new TextBlock();
                tb.FontSize = size;

                try
                {
                    tb.FontFamily = new FontFamily(font);

                    tb.Text = "X";

                    if (tb.ActualHeight == 0)
                    {
                        tb.Measure(test);
                    }

                    if (tb.ActualHeight > 0)
                    {
                        h = tb.ActualHeight;
                    }
                }
                catch
                {
                }
            }
#endif
        }

        public static double StringWidth(string s, string font, double size)
        {
            double sw = 0;

            char[] cArray = s.ToCharArray();
            uint total = 0;

            uint[] widths = null;

            string name = font.ToLower();

            if (name.StartsWith("times"))
            {
                if (name.Contains("bold"))
                {
                    widths = name.Contains("italic") ? _timesBoldItalicWidths : _timesBoldWidths;
                }
                else if (name.Contains("italic"))
                {
                    widths = _timesItalicWidths;
                }
                else
                {
                    widths = _timesRomanWidths;
                }
            }
            else if (name.StartsWith("helvetica"))
            {
                widths = name.Contains("bold") ? _helveticaBoldWidths : _helveticaWidths;
            }
            else
            {
                double scale = size > 10 ? size : 18 / size;

                Size test = new Size(10000, 10000);

                TextBlock tb = new TextBlock();
                tb.FontSize = size * scale;

                try
                {
                    tb.FontFamily = new FontFamily(font);

                    tb.Text = s;

                    if (tb.ActualHeight == 0)
                    {
                        tb.Measure(test);
                    }

                    if (tb.ActualHeight > 0)
                    {
                        sw = tb.ActualWidth / scale;
                    }
                }
                catch
                {
                }
            }

            if (sw == 0)
            {
                foreach (char c in cArray)
                {
                    if (widths == null)
                    {
                        // courier
                        total += 600;
                    }
                    else if (c > 255)
                    {
                        total += 600;
                    }
                    else
                    {
                        total += widths[c];
                    }
                }
                sw = total * size / 1000;
            }

            return sw;
        }

        public static double StringWidth(string s, FontFamily ff, double size)
        {
            double sw = 0;

                double scale = size > 10 ? size : 18 / size;

                Size test = new Size(10000, 10000);

                TextBlock tb = new TextBlock();
                tb.FontSize = size * scale;

                try
                {
                    tb.FontFamily = ff;

                    tb.Text = s;

                    if (tb.ActualHeight == 0)
                    {
                        tb.Measure(test);
                    }

                    if (tb.ActualHeight > 0)
                    {
                        sw = tb.ActualWidth / scale;
                    }
                }
                catch
                {
                }

            return sw;
        }
    }
}
